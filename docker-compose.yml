services:
  postgres:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: safescout
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 5s
      timeout: 3s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 5s
      timeout: 3s
      retries: 5

  backend:
    build:
      context: ./backend
    restart: unless-stopped
    environment:
      NODE_ENV: development
      PORT: 4000
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/safescout?schema=public
      REDIS_URL: redis://redis:6379
      JWT_SECRET: insecure-development-secret-must-change
      JWT_REFRESH_SECRET: insecure-development-refresh-secret-change
      STRIPE_API_KEY: sk_test_placeholder
      STRIPE_WEBHOOK_SECRET: whsec_placeholder
      OPENAI_API_KEY: sk-openai-placeholder
      ANTHROPIC_API_KEY: ''
    ports:
      - '4000:4000'
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: sh -c "npm run prisma:generate && npm run dev"
    working_dir: /usr/src/app
    volumes:
      - ./backend/src:/usr/src/app/src
      - ./backend/prisma:/usr/src/app/prisma
      - ./backend/package.json:/usr/src/app/package.json
      - ./backend/tsconfig.json:/usr/src/app/tsconfig.json
      - ./backend/tsconfig.build.json:/usr/src/app/tsconfig.build.json

  frontend:
    build:
      context: ./frontend
    environment:
      EXPO_PUBLIC_API_URL: http://localhost:4000/api
      EXPO_WEB_PORT: 8080
      NODE_ENV: development
      EXPO_NO_INTERACTIVE: '1'
      CHOKIDAR_USEPOLLING: '1'
    ports:
      - '8080:8080'
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    command: npm run web -- --port 8080
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  frontend_node_modules:
